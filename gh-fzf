#!/usr/bin/env bash
set -e

# MIT Licence
#
# Copyright (c) Ben Elan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

GH_FZF_VERSION="0.1.0" # x-release-please-version

# Usage info and logs                                                   {{{
# --------------------------------------------------------------------- {|}

has() { command -v "$1" >/dev/null 2>&1; }

error() {
    if [ -n "$1" ]; then
        log "ERROR" "$*"
        printf "Error: %s\n" "$*"
    fi
    printf "\n%s\n" \
        "Try -h for usage information" >&2
    exit 1
}

help_cmd() {
    printf "
An fzf wrapper around the GitHub CLI.

Project home page: https://github.com/benelan/gh-fzf

Usage:
  gh fzf <command> [flags]

Core Commands:
  i, issue       Search for and interact with GitHub issues.
  p, pr          Search for and interact with GitHub pull requests.
  r, run         Search for and interact with GitHub Action runs.

See \`gh <command> list --help\` for the flag options available for each core command.

Other Commands:
  h, help        Print this help message.
  v, version     Print the version of gh-fzf.

Check out the project home page for more information, such as keybindings and configuration.
" >&2
    exit 0
}

has_log_level() {
    case "$GH_FZF_LOG_LEVEL" in
        DEBUG*) test "$1" -gt 0 && return 1 ;;
        INFO*) test "$1" -gt 1 && return 1 ;;
        WARN*) test "$1" -gt 2 && return 1 ;;
        ERROR*) test "$1" -gt 3 && return 1 ;;
        *) error "invalid GH_FZF_LOG_LEVEL value: $GH_FZF_LOG_LEVEL" ;;
    esac
    return 0
}

logged_newline=""
log() {
    if [ -n "$GH_FZF_LOGS" ] && [ "$GH_FZF_LOGS" != "0" ]; then
        if [ -z "$1" ]; then
            printf "\n" >>"$GH_FZF_LOGS"
            return 0
        fi

        if [ -n "$GH_FZF_LOG_LEVEL" ]; then
            case "$1" in
                DEBUG) has_log_level 1 && return 0 ;;
                INFO*) has_log_level 2 && return 0 ;;
                WARN*) has_log_level 3 && return 0 ;;
                ERROR) has_log_level 4 && return 0 ;;
                *) error "invalid log level: $1" ;;
            esac
        fi

        if [ -z "$logged_newline" ]; then
            printf "\n" >>"$GH_FZF_LOGS"
            logged_newline="1"
        fi

        printf "%s | %s | %s\n" \
            "$1" \
            "$(date +%Y-%m-%dT%H:%M:%S 2>/dev/null)" \
            "$2" \
            >>"$GH_FZF_LOGS"
    fi
}

# --------------------------------------------------------------------- }}}
# Configuration                                                         {{{
# --------------------------------------------------------------------- {|}

if [ "$GH_FZF_LOGS" = "1" ]; then
    GH_FZF_LOGS="${XDG_STATE_HOME:-$HOME/.local/state}/gh-fzf/logs"
    mkdir -p "$(dirname "$GH_FZF_LOGS")"
fi

GH_FZF_DEFAULT_LIMIT="${GH_FZF_DEFAULT_LIMIT:-69}"

if [ -z "$GH_FZF_COPY_CMD" ]; then
    if has /mnt/c/Windows/System32/clip.exe; then
        GH_FZF_COPY_CMD="/mnt/c/Windows/System32/clip.exe" # Windows (WSL)
    elif has xsel; then
        GH_FZF_COPY_CMD="xsel -bi" # Linux (X11)
    elif has xclip; then
        GH_FZF_COPY_CMD="xclip -selection clipboard" # Linux (X11)
    elif has wl-copy; then
        GH_FZF_COPY_CMD="wl-copy" # Linux (Wayland)
    elif has pbcopy; then
        GH_FZF_COPY_CMD="pbcopy" # OSX
    fi

    log "INFO " "GH_FZF_COPY_CMD environment variable is not set, defaulting to \"$GH_FZF_COPY_CMD\""
fi

if [ -n "$GH_FZF_HIDE_HINTS" ]; then
    on_start="toggle-header"
else
    on_start=""
fi

# --------------------------------------------------------------------- }}}
# Command > default                                                     {{{
# --------------------------------------------------------------------- {|}

default_cmd() {
    echo "test"
    FZF_DEFAULT_COMMAND="printf 'issue\npr\nrun\n'" \
        fzf \
        --ansi \
        --no-multi \
        --no-exit-0 \
        --no-select-1 \
        --preview="GH_FORCE_TTY=true gh {} --help" \
        --preview-window='right:75%,wrap' \
        --bind="enter:execute(gh fzf {})"
}

# --------------------------------------------------------------------- }}}
# Command > issue                                                       {{{
# --------------------------------------------------------------------- {|}

issue_cmd() {
    log "DEBUG " "issue > START"

    header='Actions > (enter: edit) (alt-o: checkout) (alt-c: comment) (alt-X: close) (alt-O: reopen)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-a: assignee) (alt-A: author) (alt-m: mention) (alt-s: state=all)'

    # shellcheck disable=2016
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=true gh issue list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --ansi \
        --no-multi \
        --no-exit-0 \
        --no-select-1 \
        --header-lines=4 \
        --preview 'GH_FORCE_TTY=true gh issue view {1}' \
        --preview-window='right:50%,wrap' \
        --preview-label="(alt+P: toggle preview) (alt+H: toggle hints)" \
        --header="$header" \
        --bind="start:$on_start" \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='ctrl-o:execute-silent(gh issue view --web {1})' \
        --bind="ctrl-y:execute-silent(gh issue view {1} --json 'url' -q '.url' | $GH_FZF_COPY_CMD)" \
        --bind='enter:execute(gh issue edit {1})' \
        --bind='alt-o:execute(gh issue develop --checkout {1})+abort' \
        --bind='alt-c:execute(gh issue comment {1})' \
        --bind='alt-O:execute(gh issue reopen {1})' \
        --bind='alt-X:execute(gh issue close {1})' \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --assignee @me")' \
        --bind='alt-A:reload(eval "$FZF_DEFAULT_COMMAND --author @me")' \
        --bind='alt-m:reload(eval "$FZF_DEFAULT_COMMAND --mention @me")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --state all")' \
        --bind='alt-P:toggle-preview' \
        --bind='alt-H:toggle-header' \
        --bind='alt-1:reload(eval "$FZF_DEFAULT_COMMAND -L100")' \
        --bind='alt-2:reload(eval "$FZF_DEFAULT_COMMAND -L200")' \
        --bind='alt-3:reload(eval "$FZF_DEFAULT_COMMAND -L300")' \
        --bind='alt-4:reload(eval "$FZF_DEFAULT_COMMAND -L400")' \
        --bind='alt-5:reload(eval "$FZF_DEFAULT_COMMAND -L500")' \
        --bind='alt-6:reload(eval "$FZF_DEFAULT_COMMAND -L600")' \
        --bind='alt-6:reload(eval "$FZF_DEFAULT_COMMAND -L600")' \
        --bind='alt-7:reload(eval "$FZF_DEFAULT_COMMAND -L700")' \
        --bind='alt-8:reload(eval "$FZF_DEFAULT_COMMAND -L800")' \
        --bind='alt-9:reload(eval "$FZF_DEFAULT_COMMAND -L900")'

    log "DEBUG " "issue > END"
}

# --------------------------------------------------------------------- }}}
# Command > pr                                                          {{{
# --------------------------------------------------------------------- {|}

pr_cmd() {
    log "DEBUG " "pull request > START"

    header='Actions > (enter: edit) (alt-o: checkout) (alt-d: diff) (alt-c: comment) (alt-r: review)
        > (alt-C: checks) (alt-M: merge) (alt-X: close) (alt-O: reopen) (alt-R: ready)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-a: assignee) (alt-A: author) (alt-b: branch) (alt-s: state=all)'

    # shellcheck disable=2016
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=true gh pr list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --ansi \
        --no-multi \
        --no-exit-0 \
        --no-select-1 \
        --header-lines=4 \
        --preview 'GH_FORCE_TTY=true gh pr view {1}' \
        --preview-window='right:50%,wrap' \
        --preview-label="(alt+P: toggle preview) (alt+H: toggle hints)" \
        --header="$header" \
        --bind="start:$on_start" \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='ctrl-o:execute-silent(gh pr view --web {1})' \
        --bind="ctrl-y:execute-silent(gh pr view {1} --json 'url' -q '.url' | $GH_FZF_COPY_CMD)" \
        --bind='enter:execute(gh pr edit {1})' \
        --bind='alt-c:execute(gh pr comment {1})' \
        --bind='alt-d:execute(gh pr diff {1})' \
        --bind='alt-o:execute(gh pr checkout {1})' \
        --bind='alt-r:execute(gh pr review {1})' \
        --bind='alt-C:execute(gh pr checks {1})' \
        --bind='alt-R:execute(gh pr ready {1})' \
        --bind='alt-M:execute(gh pr merge {1})' \
        --bind='alt-O:execute(gh pr reopen {1})' \
        --bind='alt-X:execute(gh pr close {1})' \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --assignee @me")' \
        --bind='alt-A:reload(eval "$FZF_DEFAULT_COMMAND --author @me")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --state all")' \
        --bind='alt-b:reload(eval "$FZF_DEFAULT_COMMAND --head \
            $(git symbolic-ref --short HEAD)")' \
        --bind='alt-P:toggle-preview' \
        --bind='alt-H:toggle-header' \
        --bind='alt-1:reload(eval "$FZF_DEFAULT_COMMAND -L100")' \
        --bind='alt-2:reload(eval "$FZF_DEFAULT_COMMAND -L200")' \
        --bind='alt-3:reload(eval "$FZF_DEFAULT_COMMAND -L300")' \
        --bind='alt-4:reload(eval "$FZF_DEFAULT_COMMAND -L400")' \
        --bind='alt-5:reload(eval "$FZF_DEFAULT_COMMAND -L500")' \
        --bind='alt-6:reload(eval "$FZF_DEFAULT_COMMAND -L600")' \
        --bind='alt-6:reload(eval "$FZF_DEFAULT_COMMAND -L600")' \
        --bind='alt-7:reload(eval "$FZF_DEFAULT_COMMAND -L700")' \
        --bind='alt-8:reload(eval "$FZF_DEFAULT_COMMAND -L800")' \
        --bind='alt-9:reload(eval "$FZF_DEFAULT_COMMAND -L900")'

    log "DEBUG " "pull request > END"
}

# --------------------------------------------------------------------- }}}
# Command > run                                                         {{{
# --------------------------------------------------------------------- {|}

run_cmd() {
    log "DEBUG " "run (action) > START"

    run_fmt="run list \
        --json 'updatedAt,event,name,displayTitle,headBranch,databaseId,conclusion' \
        --template '{{range .}}{{tablerow \
            (truncate 60 (.displayTitle | autocolor \"white+b\")) \
            (truncate 25 (.name | autocolor \"white\")) \
            (truncate 25 (.headBranch | autocolor \"white+b\")) \
            (.event | autocolor \"white\") \
            (.conclusion | autocolor \"white+b\") \
            ((timeago .updatedAt) | autocolor \"white\") \
            .databaseId \
        }}{{end}}'"

    header='Actions > (enter: watch) (alt-l: logs) (alt-r: rerun) (alt-x: cancel)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-f: failed runs) (alt-b: current branch) (alt-u: current user)
 '
    # shellcheck disable=2016
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=true gh $run_fmt -L $GH_FZF_DEFAULT_LIMIT $*" fzf \
        --ansi \
        --no-multi \
        --no-exit-0 \
        --no-select-1 \
        --preview 'GH_FORCE_TTY=true gh run view {-1}' \
        --preview-window='right:35%,wrap' \
        --preview-label="(alt+P: toggle preview) (alt+H: toggle hints)" \
        --header="$header" \
        --bind="start:$on_start" \
        --bind='ctrl-r:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='ctrl-o:execute-silent(gh run view --web {-1})' \
        --bind="ctrl-y:execute-silent(gh run view {-1} --json 'url' -q '.url' | $GH_FZF_COPY_CMD)" \
        --bind='enter:execute(gh run watch {-1})' \
        --bind='alt-l:execute(gh run view --log {-1})' \
        --bind='alt-r:execute(gh run rerun {-1})' \
        --bind='alt-x:execute(gh run cancel {-1})' \
        --bind='alt-b:reload(eval "$FZF_DEFAULT_COMMAND --branch \
            $(git symbolic-ref --short HEAD)")' \
        --bind='alt-f:reload(eval "$FZF_DEFAULT_COMMAND --status failure")' \
        --bind='alt-u:reload(eval "$FZF_DEFAULT_COMMAND --user $(gh api user -q .login)")' \
        --bind='alt-P:toggle-preview' \
        --bind='alt-H:toggle-header' \
        --bind='alt-1:reload(eval "$FZF_DEFAULT_COMMAND -L100")' \
        --bind='alt-2:reload(eval "$FZF_DEFAULT_COMMAND -L200")' \
        --bind='alt-3:reload(eval "$FZF_DEFAULT_COMMAND -L300")' \
        --bind='alt-4:reload(eval "$FZF_DEFAULT_COMMAND -L400")' \
        --bind='alt-5:reload(eval "$FZF_DEFAULT_COMMAND -L500")' \
        --bind='alt-6:reload(eval "$FZF_DEFAULT_COMMAND -L600")' \
        --bind='alt-6:reload(eval "$FZF_DEFAULT_COMMAND -L600")' \
        --bind='alt-7:reload(eval "$FZF_DEFAULT_COMMAND -L700")' \
        --bind='alt-8:reload(eval "$FZF_DEFAULT_COMMAND -L800")' \
        --bind='alt-9:reload(eval "$FZF_DEFAULT_COMMAND -L900")'

    log "DEBUG " "run (action) > END"
}

# --------------------------------------------------------------------- }}}
# Parse arguments                                                       {{{
# --------------------------------------------------------------------- {|}

main() {
    command="$1"

    if [ -z "$command" ]; then
        default_cmd
    else
        shift
    fi

    case $command in
        h | -h | help | --help) help_cmd "$@" ;;
        r | -r | run | runs | --run | --runs) run_cmd "$@" ;;
        p | -p | pr | prs | --pr | --prs) pr_cmd "$@" ;;
        i | -i | issue | issues | --issue | --issues) issue_cmd "$@" ;;
        v | V | -v | -V | version | --version) printf "%s\n" "$GH_FZF_VERSION" ;;
        *) error "invalid command: \"$command\"" ;;
    esac
}

# --------------------------------------------------------------------- }}}

log "INFO " "START > args: $*"

main "$@"
