#!/usr/bin/env bash
# shellcheck disable=2086,2015,2016
set -e

# An fzf wrapper around the GitHub CLI - https://github.com/benelan/gh-fzf
#
# MIT License
#
# Copyright (c) Ben Elan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

GH_FZF_VERSION="v0.11.0" # x-release-please-version

# USAGE INFO AND LOGS                                                   {{{1

has() { command -v "$1" >/dev/null 2>&1; }

error() {
    if [ -n "$1" ]; then
        printf "Error: " >&2
        printf "%s\n" "$@" >&2
    fi
    printf "\n%s\n" "See -h for usage info" >&2
    exit 1
}

help_cmd() {
    printf "
An fzf wrapper around the GitHub CLI.

Homepage: https://github.com/benelan/gh-fzf

Usage:
  gh fzf <command> [flags]

Core Commands:
  issue       Search for and interact with GitHub issues.
  pr          Search for and interact with GitHub pull requests.
  run         Search for and interact with GitHub Action runs.
  workflow    Search for and interact with GitHub Action workflows.
  release     Search for and interact with GitHub releases.
  label       Search for and interact with GitHub labels.
  milestone   Search for and interact with GitHub milestones via \`gh api\`.
  repo        Search for and interact with GitHub repos.
  gist        Search for and interact with GitHub gists.

See \`gh <command> list --help\` for the flag options.

Other Commands:
  help        Print this help message.
  version     Print the version of gh-fzf.
  changelog   View gh-fzf's changelog via the release command.
  util        Functions used internally that may be useful for scripting.

Check out the project homepage for more information, such as keybindings,
configuration, and examples.
" >&2
    exit 0
}

global_binds="Globals > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload) (alt-1: 100 items) (alt-2: 200 items) (...) (alt-9: 900 items)"

# ----------------------------------------------------------------------1}}}
# CONFIGURATION                                                         {{{1

GH_FZF_DEFAULT_LIMIT="${GH_FZF_DEFAULT_LIMIT:-69}"

if [ -z "$GH_FZF_COPY_CMD" ]; then
    if has /mnt/c/Windows/System32/clip.exe; then
        GH_FZF_COPY_CMD="/mnt/c/Windows/System32/clip.exe" # Windows (WSL)
    elif has xsel; then
        GH_FZF_COPY_CMD="xsel -bi" # Linux (X11)
    elif has xclip; then
        GH_FZF_COPY_CMD="xclip -selection clipboard" # Linux (X11)
    elif has wl-copy; then
        GH_FZF_COPY_CMD="wl-copy" # Linux (Wayland)
    elif has pbcopy; then
        GH_FZF_COPY_CMD="pbcopy" # OSX
    fi
fi

if [ -z "$GH_FZF_OPEN_CMD" ]; then
    if [ -n "$BROWSER" ]; then
        GH_FZF_OPEN_CMD="$BROWSER"
    elif has wslview; then
        GH_FZF_OPEN_CMD="wslview"
    elif has cygstart; then
        GH_FZF_OPEN_CMD="cygstart"
    elif has start; then
        GH_FZF_OPEN_CMD="start"
    elif has xdg-open; then
        GH_FZF_OPEN_CMD="xdg-open"
    elif has open; then
        GH_FZF_OPEN_CMD="open"
    fi
fi

if [ -n "$GH_FZF_HIDE_HINTS" ]; then
    on_start="toggle-header"
fi

if [ -n "$GH_FZF_TRUNCATE_FIELDS" ]; then
    gh_columns='100%'
else
    gh_columns='9999999'
fi

# The following fzf options are shared by all commands. They are prepended to
# the FZF_DEFAULT_OPTS environment variable so they can be overridden by users.
export FZF_DEFAULT_OPTS='
--no-hscroll --no-exit-0 --header-lines=1 --cycle --reverse --delimiter="  "
--preview-window="right,50%,wrap,~2,<60(down,40%,wrap)"
--preview-label="(alt+P: toggle preview) (alt+H: toggle hints)"
--bind="alt-P:toggle-preview" --bind="alt-H:toggle-header"
--color "fg:#ebdbb2,fg+:#ebdbb2,bg:#282828,bg+:#3c3836,hl:#d3869b:bold,hl+:#d3869b,info:#83a598,prompt:#bdae93,spinner:#fabd2f,pointer:#83a598,marker:#fe8019,header:#928374,label:#83a598"
--bind="ctrl-r:reload(eval \"$FZF_DEFAULT_COMMAND\")"
--bind="alt-1:reload(eval \"$FZF_DEFAULT_COMMAND -L100\")"
--bind="alt-2:reload(eval \"$FZF_DEFAULT_COMMAND -L200\")"
--bind="alt-3:reload(eval \"$FZF_DEFAULT_COMMAND -L300\")"
--bind="alt-4:reload(eval \"$FZF_DEFAULT_COMMAND -L400\")"
--bind="alt-5:reload(eval \"$FZF_DEFAULT_COMMAND -L500\")"
--bind="alt-6:reload(eval \"$FZF_DEFAULT_COMMAND -L600\")"
--bind="alt-6:reload(eval \"$FZF_DEFAULT_COMMAND -L600\")"
--bind="alt-7:reload(eval \"$FZF_DEFAULT_COMMAND -L700\")"
--bind="alt-8:reload(eval \"$FZF_DEFAULT_COMMAND -L800\")"
--bind="alt-9:reload(eval \"$FZF_DEFAULT_COMMAND -L900\")"
'"$FZF_DEFAULT_OPTS"' --no-select-1 --ansi --no-multi'
# Overriding the three options above breaks gh-fzf, so append them instead.

# ----------------------------------------------------------------------1}}}
# COMMAND > DEFAULT                                                     {{{1

default_cmd() {
    FZF_DEFAULT_COMMAND="printf 'COMMAND\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n' \
        issue pr run workflow release label milestone repo gist" \
        fzf \
        --preview='
            cmd={};
            if [ $cmd = "milestone" ]; then
                cmd="api"
                printf "%s\n\n" "There is no \`gh milestone\` command so \`gh api\` is used:"
            fi
            GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh help $cmd
        ' \
        --preview-window='right:75%,wrap' \
        --bind="enter:execute(gh fzf {})"
}

# ----------------------------------------------------------------------1}}}
# COMMAND > ISSUE                                                       {{{1

issue_cmd() {
    # go template      {{{2
    issue_template='\
        --json "number,title,author,assignees,state,milestone,labels,updatedAt" \
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("ISSUE" | autocolor $headerColor)
                ("LAST UPDATE" | autocolor $headerColor)
                ("TITLE" | autocolor $headerColor)
                ("AUTHOR" | autocolor $headerColor)
                ("MILESTONE" | autocolor $headerColor)
                ("LABELS" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $milestoneTitle := "" -}}
                {{- if ne .milestone nil -}}
                    {{- $milestoneTitle = .milestone.title -}}
                {{- end -}}

                {{- $stateColor := "green" -}}
                {{- if eq .state "CLOSED" -}}
                    {{- $stateColor = "red" -}}
                {{- end -}}

                {{- tablerow
                    (printf "#%v" .number | autocolor $stateColor)
                    ((timeago .updatedAt) | autocolor "white+d")
                    (truncate 100 (.title | autocolor "white+h"))
                    (.author.login | autocolor "white+d")
                    ($milestoneTitle | autocolor "white+h")
                    (pluck "name" .labels | join ", " | autocolor "white+d")
                -}}
            {{- end -}}
    '\'''

    # keybinding hints {{{2
    issue_header="Actions > (enter: edit) (alt-c: comment) (alt-o: checkout) (alt-l: add labels) (alt-L: remove labels) (alt-X: close) (alt-O: reopen)
Filters > (alt-a: assignee) (alt-A: author) (alt-m: mention) (alt-M: milestone) (alt-s: state=all)
$global_binds

"

    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh issue list $issue_template -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh issue view {1} --comments '"$repo_flag" \
        --header="$issue_header" \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh issue view --web {1} $repo_flag &)+refresh-preview" \
        --bind="ctrl-y:execute-silent(gh fzf util copy-url issue {1})+refresh-preview" \
        --bind="enter:execute(gh issue edit {1} $repo_flag)+refresh-preview" \
        --bind='alt-o:become(gh fzf util develop-issue {1})' \
        --bind="alt-c:execute(gh issue comment {1} $repo_flag)+refresh-preview" \
        --bind='alt-l:execute(gh fzf util select-labels add issue {1})+refresh-preview' \
        --bind='alt-L:execute(gh fzf util select-labels remove issue {1})+refresh-preview' \
        --bind="alt-O:execute(gh issue reopen {1} $repo_flag)+refresh-preview" \
        --bind="alt-X:execute(gh issue close {1} $repo_flag)+refresh-preview" \
        --bind='alt-M:execute(gh fzf milestone > /tmp/gh-fzf-milestone)+reload(
            m="$(cat /tmp/gh-fzf-milestone)"
            rm -f /tmp/gh-fzf-milestone;
            eval "$FZF_DEFAULT_COMMAND${m:+ --milestone \"$m\"}"
        )' \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --assignee @me")' \
        --bind='alt-A:reload(eval "$FZF_DEFAULT_COMMAND --author @me")' \
        --bind='alt-m:reload(eval "$FZF_DEFAULT_COMMAND --mention @me")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --state all")'

    #2}}}
}

# ----------------------------------------------------------------------1}}}
# COMMAND > PR                                                          {{{1

pr_cmd() {
    # go template      {{{2
    pr_template='\
        --json "number,title,state,headRefName,milestone,updatedAt,labels" \
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("PR" | autocolor $headerColor)
                ("LAST UPDATE" | autocolor $headerColor)
                ("TITLE" | autocolor $headerColor)
                ("BRANCH" | autocolor $headerColor)
                ("LABELS" | autocolor $headerColor)
                ("MILESTONE" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $milestoneTitle := "" -}}
                {{- if ne .milestone nil -}}
                    {{- $milestoneTitle = .milestone.title -}}
                {{- end -}}

                {{- $stateColor := "green" -}}
                {{- if eq .state "CLOSED" -}}
                    {{- $stateColor = "red" -}}
                {{- else if eq .state "MERGED" -}}
                    {{- $stateColor = "magenta" -}}
                {{- end -}}

                {{- tablerow
                    (printf "#%v" .number | autocolor $stateColor)
                    ((timeago .updatedAt) | autocolor "white+d")
                    (truncate 100 (.title | autocolor "white+h"))
                    (truncate 60 (.headRefName | autocolor "white+d"))
                    (pluck "name" .labels | join ", " | autocolor "white+h")
                    ($milestoneTitle | autocolor "white+d")
                -}}
            {{- end -}}
    '\'''

    # keybinding hints {{{2
    pr_header="Actions > (enter: edit) (alt-o: checkout) (alt-d: diff) (alt-c: comment) (alt-r: review) (alt-l: add labels)
        > (alt-C: checks) (alt-M: merge) (alt-R: ready) (alt-X: close) (alt-O: reopen) (alt-L: remove labels)
Filters > (alt-a: assignee) (alt-A: author) (alt-b: branch) (alt-s: state=all)
$global_binds

"
    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh pr list $pr_template -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh pr view {1} --comments '"$repo_flag" \
        --header="$pr_header" \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh pr view --web {1} $repo_flag &)+refresh-preview" \
        --bind="ctrl-y:execute-silent(gh fzf util copy-url pr {1})+refresh-preview" \
        --bind="enter:execute(gh pr edit {1} $repo_flag)+refresh-preview" \
        --bind="alt-c:execute(gh pr comment {1} $repo_flag)+refresh-preview" \
        --bind="alt-d:execute(gh pr diff {1} $repo_flag)+refresh-preview" \
        --bind="alt-o:become(gh pr checkout {1} $repo_flag)" \
        --bind="alt-r:execute(gh pr review {1} $repo_flag)+refresh-preview" \
        --bind='alt-l:execute(gh fzf util select-labels add pr {1})+refresh-preview' \
        --bind='alt-L:execute(gh fzf util select-labels remove pr {1})+refresh-preview' \
        --bind='alt-C:execute<gh fzf run -b $(
            gh pr view {1} --json headRefName --jq .headRefName '"$repo_flag"'
        ) '"$repo_flag"'>+refresh-preview' \
        --bind="alt-R:execute(gh pr ready {1} $repo_flag)+refresh-preview" \
        --bind="alt-M:execute(gh pr merge {1} $repo_flag)+refresh-preview" \
        --bind="alt-O:execute(gh pr reopen {1} $repo_flag)+refresh-preview" \
        --bind="alt-X:execute(gh pr close {1} $repo_flag)+refresh-preview" \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --assignee @me")' \
        --bind='alt-A:reload(eval "$FZF_DEFAULT_COMMAND --author @me")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --state all")' \
        --bind='alt-b:reload(eval "$FZF_DEFAULT_COMMAND --head \
            $(git symbolic-ref --short HEAD)")'

    #2}}}
}

# ----------------------------------------------------------------------1}}}
# COMMAND > RUN                                                         {{{1

run_cmd() {
    # go template      {{{2
    run_template='\
        --json "updatedAt,event,displayTitle,headBranch,databaseId,conclusion,status,name" \
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("STATUS" | autocolor $headerColor)
                ("LAST UPDATE" | autocolor $headerColor)
                ("WORKFLOW" | autocolor $headerColor)
                ("BRANCH" | autocolor $headerColor)
                ("TITLE" | autocolor $headerColor)
                ("EVENT" | autocolor $headerColor)
                ("ID" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $statusColor := "yellow" -}}
                {{- $statusText := .status -}}
                {{- if ne (len .conclusion) 0 -}}
                    {{- $statusText = .conclusion -}}
                    {{- if eq .conclusion "failure" "startup_failure" -}}
                        {{- $statusColor = "red" -}}
                    {{- else if eq .conclusion "cancelled" "timed_out" -}}
                        {{- $statusColor = "red+d" -}}
                    {{- else if eq .conclusion "action_required" -}}
                        {{- $statusColor = "magenta+h" -}}
                    {{- else if eq .conclusion "stale" -}}
                        {{- $statusColor = "yellow+d" -}}
                    {{- else if eq .conclusion "success" -}}
                        {{- $statusColor = "green" -}}
                    {{- else if eq .conclusion "skipped" -}}
                        {{- $statusColor = "white+d" -}}
                    {{- end -}}
                {{- end -}}

                {{- tablerow
                    ($statusText | autocolor $statusColor)
                    ((timeago .updatedAt) | autocolor "white+d")
                    (.name | autocolor "white+h")
                    (truncate 60 (.headBranch | autocolor "white+d"))
                    (truncate 100 (.displayTitle | autocolor "white+h"))
                    (.event | autocolor "white+d")
                    (.databaseId | autocolor "white+h")
                -}}
            {{- end -}}
    '\'''

    # keybinding hints {{{2
    run_header="Actions > (enter: watch) (alt-l: logs) (alt-r: rerun) (alt-x: cancel) (alt-n: notify) (alt-p: pr) (alt-d: download)
Filters > (alt-f: failed) (alt-i: in_progress) (alt-b: current branch) (alt-u: current user)
$global_binds

"

    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh run list $run_template -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh run view {-1} '"$repo_flag" \
        --header="$run_header" \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh run view --web {-1} $repo_flag &)+refresh-preview" \
        --bind="ctrl-y:execute-silent(gh fzf util copy-url run {-1})+refresh-preview" \
        --bind="enter:execute(gh run watch {-1} $repo_flag)+refresh-preview" \
        --bind="alt-l:execute(gh run view --log {-1} $repo_flag)+refresh-preview" \
        --bind="alt-r:execute(gh run rerun {-1} $repo_flag)+refresh-preview" \
        --bind="alt-d:execute(gh run download {-1} $repo_flag)+refresh-preview" \
        --bind="alt-x:execute(gh run cancel {-1} $repo_flag)+refresh-preview" \
        --bind="alt-n:execute-silent(
            gh fzf util notify-run-completed {-1} $repo_flag &
        )+refresh-preview" \
        --bind='alt-p:execute<gh fzf pr --head $(
            gh run view {-1} --json headBranch --jq .headBranch '"$repo_flag"'
        ) '"$repo_flag"'>+refresh-preview' \
        --bind='alt-b:reload(
            eval "$FZF_DEFAULT_COMMAND --branch $(git symbolic-ref --short HEAD)"
        )' \
        --bind='alt-f:reload(eval "$FZF_DEFAULT_COMMAND --status failure")' \
        --bind='alt-i:reload(eval "$FZF_DEFAULT_COMMAND --status in_progress")' \
        --bind='alt-u:reload(
            eval "$FZF_DEFAULT_COMMAND --user $(gh api user -q .login)"
        )'

    #2}}}
}

# ----------------------------------------------------------------------1}}}
# COMMAND > WORKFLOW                                                    {{{1

workflow_cmd() {
    # keybinding hints {{{2
    workflow_header="Actions > (enter: runs) (alt-d: dispatch) (alt-X: disable) (alt-E: enable)
Filters > (alt-a: all)
$global_binds

"

    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh workflow list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh workflow view --yaml {-1} '"$repo_flag" \
        --header="$workflow_header" \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh workflow view --web {-1} $repo_flag &)+refresh-preview" \
        --bind="enter:execute(gh fzf run --workflow {-1} $repo_flag)+refresh-preview" \
        --bind="alt-d:execute(gh workflow run {-1} $repo_flag)+refresh-preview" \
        --bind="alt-E:execute(gh workflow enable {-1} $repo_flag)+refresh-preview" \
        --bind="alt-X:execute(gh workflow disable {-1} $repo_flag)+refresh-preview" \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --all")'

    #2}}}
}

# ----------------------------------------------------------------------1}}}
# COMMAND > RELEASE                                                     {{{1

release_cmd() {
    # go template      {{{2
    release_template='\
        --json "publishedAt,isDraft,isLatest,isPrerelease,name,tagName" \
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("TAG" | autocolor $headerColor)
                ("PUBLISHED" | autocolor $headerColor)
                ("TITLE" | autocolor $headerColor)
                ("TYPE" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $type := "" -}}
                {{- $typeColor := "white+d" -}}
                {{- if eq .isLatest true -}}
                    {{- $type = "Latest" -}}
                    {{- $typeColor = "green" -}}
                {{- else if eq .isPrerelease true -}}
                    {{- $type = "Pre-release" -}}
                    {{- $typeColor = "yellow" -}}
                {{- else if eq .isDraft true -}}
                    {{- $type = "Draft" -}}
                {{- end -}}
                {{- tablerow
                    (.tagName | autocolor "white+h")
                    (printf "%s (%s)"
                        (timefmt "2006-01-02" .publishedAt)
                        (timeago .publishedAt)
                    | autocolor "white+d")
                    (.name | autocolor "white+h")
                    ($type | autocolor $typeColor)
                -}}
            {{- end -}}
    '\'''

    # keybinding hints {{{2
    release_header="Actions > (enter: download) (alt-X: delete)
Filters > (alt-s: stable) (alt-p: published) (alt-a: ascending)
$global_binds

"

    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh release list $release_template -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh release view {1} '"$repo_flag" \
        --header="$release_header" \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh release view --web {1} $repo_flag &)+refresh-preview" \
        --bind="ctrl-y:execute-silent(gh fzf util copy-url release {1})+refresh-preview" \
        --bind="alt-enter:execute(gh release download {1} $repo_flag)+refresh-preview" \
        --bind="alt-X:execute(gh release delete {1} $repo_flag)+refresh-preview" \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --exclude-pre-releases")' \
        --bind='alt-p:reload(eval "$FZF_DEFAULT_COMMAND --exclude-drafts")' \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --order asc")'

    #2}}}
}

# ----------------------------------------------------------------------1}}}
# COMMAND > LABEL                                                       {{{1

label_cmd() {
    # keybinding hints {{{2
    label_header="Actions > (enter: print) (alt-n: edit name) (alt-d: edit description) (alt-c: edit color) (alt-X: delete)
Filters > (alt-N: sort by name) (alt-D: descending order)
$global_binds
"

    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh label list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --multi \
        --no-preview \
        --header-lines=4 \
        --header="$label_header" \
        --bind="start:$on_start" \
        --bind="enter:become(printf '%s\n' {+} | awk -F'  ' '{print \$1}')" \
        --bind="ctrl-o:execute-silent(gh label list --web $repo_flag &)" \
        --bind='alt-n:execute(
            read -rp "Enter new name for {1} label: " name;
            [ -n "$name" ] && gh label edit {1} --name "$name" '"$repo_flag"'
        )+reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-d:execute(
            read -rp "Enter new description for {1} label: " description;
            [ -n "$description" ] &&
                gh label edit {1} --description "$description" '"$repo_flag"'
        )+reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-c:execute(
            read -rp "Enter new color for {1} label: " color;
            [ -n "$color" ] && gh label edit {1} --color "$color" '"$repo_flag"'
        )+reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind="alt-X:execute(gh label delete {1} $repo_flag)" \
        --bind='alt-N:reload(eval "$FZF_DEFAULT_COMMAND --sort name")' \
        --bind='alt-D:reload(eval "$FZF_DEFAULT_COMMAND --order desc")' || true

    #2}}}
}

# --------------------------------------------------------------------- 1}}}
# COMMAND > MILESTONE                                                   {{{1

milestone_cmd() {
    # go template      {{{2
    milestone_template='\
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("TITLE" | autocolor $headerColor)
                ("DUE" | autocolor $headerColor)
                ("OPEN" | autocolor $headerColor)
                ("CLOSED" | autocolor $headerColor)
                ("DESCRIPTION" | autocolor $headerColor)
                ("NUMBER" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $due := .due_on }}
                {{- if ne .due_on nil -}}
                    {{- $due = (timefmt "2006-01-02" .due_on) -}}
                {{- end -}}
                {{- $stateColor := "white+d" -}}
                {{- if eq .state "open" -}}
                    {{- $stateColor = "green" -}}
                {{- else -}}
                    {{- $stateColor = "red" -}}
                {{- end -}}
                {{- tablerow
                    (.title | autocolor "white+h")
                    ($due | autocolor "white+d")
                    (.open_issues | autocolor "white+h")
                    (.closed_issues | autocolor "white+d")
                    (.description | autocolor "white+h")
                    (.number | autocolor $stateColor)
                -}}
            {{- end -}}
    '\'''

    # keybinding hints {{{2
    milestone_header="Actions > (enter: print) (alt-i: issues) (alt-X: close) (alt-O: reopen) (alt-t: edit title) (alt-d: edit description)
Filters > (alt-s: state=all) (alt-c: sort by completeness) (alt-D: descending order)
Globals > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
"

    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh api --paginate $milestone_template \
    -H 'Accept: application/vnd.github+json' \
    -H 'X-GitHub-Api-Version: 2022-11-28' \
    '/repos/{owner}/{repo}/milestones'" \
        fzf \
        --no-preview \
        --header="$milestone_header" \
        --bind="start:$on_start" \
        --bind="enter:become(echo {1})" \
        --bind="ctrl-y:execute-silent(
            gh api --jq '.html_url' \
                -H 'Accept: application/vnd.github+json' \
                -H 'X-GitHub-Api-Version: 2022-11-28' \
                /repos/{owner}/{repo}/milestones/{-1} | $GH_FZF_COPY_CMD
        )" \
        --bind="ctrl-o:execute-silent(
            url=\"\$(gh api --jq '.html_url' \
                -H 'Accept: application/vnd.github+json' \
                -H 'X-GitHub-Api-Version: 2022-11-28' \
                /repos/{owner}/{repo}/milestones/{-1})\"
            [ -n \"\$url\" ] && $GH_FZF_OPEN_CMD \"\$url\" &
        )" \
        --bind="alt-i:execute(gh fzf issue --milestone {-1} $repo_flag)" \
        --bind='alt-X:execute(
            gh api --silent --method PATCH -f "state=closed" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                /repos/{owner}/{repo}/milestones/{-1}
        )+reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-O:execute(
            gh api --silent --method PATCH -f "state=open" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                /repos/{owner}/{repo}/milestones/{-1}
        )+reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-t:execute(
            read -rp "Enter new milestone title: " t;
            [ -n "$t" ] && gh api --silent --method PATCH -f "title=$t" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                /repos/{owner}/{repo}/milestones/{-1}
        )+reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-d:execute(
            read -rp "Enter new milestone description: " d;
            [ -n "$d" ] && gh api --silent --method PATCH -f "description=$d" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                /repos/{owner}/{repo}/milestones/{-1}
        )+reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-c:reload(eval "${FZF_DEFAULT_COMMAND}?sort=completeness")' \
        --bind='alt-s:reload(eval "${FZF_DEFAULT_COMMAND}?state=all")' \
        --bind='alt-D:reload(eval "${FZF_DEFAULT_COMMAND}?direction=desc")' \
        --bind='alt-1:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-2:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-3:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-4:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-5:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-6:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-6:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-7:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-8:reload(eval "$FZF_DEFAULT_COMMAND")' \
        --bind='alt-9:reload(eval "$FZF_DEFAULT_COMMAND")'

    #2}}}
}

# --------------------------------------------------------------------- 1}}}
# COMMAND > REPO                                                        {{{1

repo_cmd() {
    # go template      {{{2
    # repo_template='\
    #     --json "nameWithOwner,description,stargazerCount,forkCount,updatedAt,viewerPermission,visibility" \
    #     --template '\''
    #         {{- $headerColor := "blue+b" -}}
    #         {{- tablerow
    #             ("REPO" | autocolor $headerColor)
    #             ("VISIBILITY" | autocolor $headerColor)
    #             ("PERMISSIONS" | autocolor $headerColor)
    #             ("LAST UPDATE" | autocolor $headerColor)
    #             ("DESCRIPTION" | autocolor $headerColor)
    #             ("STARS" | autocolor $headerColor)
    #             ("FORKS" | autocolor $headerColor)
    #         -}}

    #         {{- range . -}}
    #             {{- tablerow
    #                 (.nameWithOwner | autocolor "white+h")
    #                 (.visibility | autocolor "white+d")
    #                 (.viewerPermission | autocolor "white+h")
    #                 ((timeago .updatedAt) | autocolor "white+d")
    #                 (truncate 100 (.description | autocolor "white+h"))
    #                 (.stargazerCount | autocolor "white+d")
    #                 (.forkCount | autocolor "white+h")
    #             -}}
    #         {{- end -}}
    # '\'''

    # keybinding hints {{{2
    repo_header="Actions > (enter: edit) (alt-p: prs) (alt-i: issues) (alt-r: runs) (alt-C: clone) (alt-F: fork)
Filters > (alt-c: private) (alt-o: public) (alt-s: source) (alt-f: forks)
$global_binds
"

    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh repo list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh repo view {1}' \
        --header="$repo_header" \
        --header-lines=4 \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh repo view --web {1} &)+refresh-preview" \
        --bind="ctrl-y:execute-silent(gh fzf util copy-url repo {1})+refresh-preview" \
        --bind="alt-p:execute(gh fzf pr --repo {1})+refresh-preview" \
        --bind="alt-i:execute(gh fzf issue --repo {1})+refresh-preview" \
        --bind="alt-r:execute(gh fzf run --repo {1})+refresh-preview" \
        --bind="enter:execute(gh repo edit {1})+refresh-preview" \
        --bind="alt-C:execute(gh repo clone {1})+refresh-preview" \
        --bind="alt-F:execute(gh repo fork {1})+refresh-preview" \
        --bind='alt-c:reload(eval "$FZF_DEFAULT_COMMAND --visibility private")' \
        --bind='alt-o:reload(eval "$FZF_DEFAULT_COMMAND --visibility public")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --source")' \
        --bind='alt-f:reload(eval "$FZF_DEFAULT_COMMAND --fork")'

    #2}}}
}

# ----------------------------------------------------------------------1}}}
# COMMAND > GIST                                                        {{{1

gist_cmd() {
    # keybinding hints {{{2
    gist_header='Actions > (enter: edit) (alt-c: clone) (alt-X: delete)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-p: public) (alt-s: secret)

'

    # fzf command      {{{2
    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh gist list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh gist view {1}' \
        --header="$gist_header" \
        --bind="start:$on_start" \
        --bind='ctrl-o:execute-silent(gh gist view --web {1} &)+refresh-preview' \
        --bind="ctrl-y:execute-silent(
            echo https://gist.github.com/$(gh api user -q .login)/{1} | $GH_FZF_COPY_CMD
        )+refresh-preview" \
        --bind='enter:execute(gh gist edit {1})+refresh-preview' \
        --bind='alt-c:execute(gh gist clone {1})+refresh-preview' \
        --bind="alt-X:execute(gh gist delete {1})+refresh-preview" \
        --bind='alt-p:reload(eval "$FZF_DEFAULT_COMMAND --public")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --secret")'

    #2}}}
}

# ----------------------------------------------------------------------1}}}
# COMMAND > UTIL                                                        {{{1

# append a given flag to each argument {{{2
# arg1: the flag to append to the each of the following arguments
# arg2...n: the values for the flag
# example: $ flagify --add-label "foo" "bar baz" "etc., etc."
#          => --add-label="foo" --add-label="bar baz" --add-label="etc., etc."
flagify() {
    flag="$1"
    [ -n "$flag" ] && shift || error "missing argument(s)." \
        "Usage: gh fzf util flagify <flag> [<value>...]"

    awk -F"  " '{str = sprintf("'"${flag}"'=\"%s\"", $1)}; {print str}' |
        tr -t '\n' ' '
}

# select labels to add/remove from an issue or pr {{{2
# arg1: the type of edit, either "add" or "remove"
# arg2: the gh command, either "issue" or "pr"
# arg3: the issue or pr <number>
select_labels() {
    [ -n "$3" ] && { [ "$1" = "add" ] || [ "$1" = "remove" ]; } &&
        { [ "$2" = "pr" ] || [ "$2" = "issue" ]; } ||
        error "missing argument(s)." \
            "Usage: gh fzf util modify-labels (add | remove) (issue | pr) <identifer>"

    # increase the limit when selecting labels
    [ "$GH_FZF_DEFAULT_LIMIT" -lt 420 ] && label_limit="-L 420"

    label_flags="$(
        gh fzf label $label_limit | flagify "--$1-label"
    )"

    [ -n "$label_flags" ] && eval "gh $2 edit \"$3\" $label_flags $repo_flag"
}

# prompt for a branch name {{{2
# arg1: issue number
branch_prompt() {
    [ -z "$1" ] && error "missing argument." \
        "Usage: gh fzf util branch-prompt <issue-number>"

    issue="${GH_FZF_BRANCH_ADD_ISSUE_NUMBER:+${1}$GH_FZF_BRANCH_ADD_ISSUE_NUMBER}"
    sanitized_issue=$(tr -d "#'\''" <<<"${issue// /}")

    read -rp "Enter branch name for ${1}: ${GH_FZF_BRANCH_PREFIX}${sanitized_issue}" name
    echo "${GH_FZF_BRANCH_PREFIX}${sanitized_issue}${name// /-}"
}

# create/checkout a branch linked to the issue {{{2
# arg1: issue number
develop_issue() {
    [ -z "$1" ] && error "missing argument." \
        "Usage: gh fzf util develop-issue <issue-number>"

    branch="$(gh issue develop --list $1 $repo_flag | tail | cut -f1)"

    if git show-ref --quiet "refs/heads/$branch"; then
        git checkout "$branch"
    else
        name="$(gh fzf util branch-prompt $1)"
        gh issue develop --checkout ${name:+--name "$name"} $1 $repo_flag
    fi
}

# copy url to clipboard {{{2
# arg1: github command, supports: "issue", "pr", "run", "release", "repo"
# arg2: item identifier for the command (<number>, <run-id>, etc.)
copy_url() {
    [ -z "$2" ] && error "missing argument(s)." \
        "Usage: gh fzf util copy_url (issue | pr | run | release | repo) <identifier>"

    case $1 in
        issue | pr | run | release | repo)
            gh $1 view --json 'url' -q '.url' $2 $repo_flag | $GH_FZF_COPY_CMD
            ;;
        *)
            error "invalid command: \"$1\"" \
                "Valid commands: issue, pr, run, release, repo"
            ;;
    esac
}

# desktop notification when run has completed {{{2
# arg1: run id
notify_run_completed() {
    run_id="$1"

    [ -n "$run_id" ] && shift || error "missing argument." \
        "Usage: gh fzf util notify-run-completed <run-id>"

    gh run watch --exit-status $run_id $repo_flag || urgency="critical"

    OLDIFS=$IFS
    IFS=$'\n'

    run_info="$(
        gh run view $run_id $repo_flag \
            --json name,headBranch,conclusion,url \
            --jq .name,.headBranch,.conclusion,.url
    )"

    set -- $run_info
    workflow="$1"
    branch="$2"
    conclusion="$3"
    url="$4"

    IFS=$OLDIFS

    title="${workflow:-GitHub Action run concluded}"

    # The `conclusion` field is the run's URL if it is still in progress. This
    # causes weird notification formatting in an edge case where the watch
    # process gets killed (e.g., by `killall gh`.)
    case $conclusion in https://*) conclusion="notification cancelled for run" ;; esac

    body="${conclusion}${branch:+" on '$branch' branch"}"

    if has dunstify; then
        [ -n "$urgency" ] &&
            conditional_action="rerun,rerun failed jobs" ||
            conditional_action="download,download artifacts"

        action_response=$(
            dunstify "$title" "$body" ${urgency:+-u "$urgency"} \
                ${GH_FZF_NOTIFY_ICON:+-i "$GH_FZF_NOTIFY_ICON"} -a "gh-fzf" \
                -A "web,open in browser" -A "log,view logs" -A "$conditional_action"
        )

        case $action_response in
            web) gh run view --web $run_id $repo_flag & ;;
            download) gh run download $run_id $repo_flag ;;
            rerun)
                gh run rerun --failed $run_id $repo_flag
                gh fzf util notify-run-completed $run_id $repo_flag &
                ;;
            log)
                case $TERMINAL in
                    x-terminal-emulator | xterm | wezterm | kitty | alacritty | \
                        gnome-terminal | konsole | foot | eterm | st)
                        $TERMINAL -e sh -c "gh run view --log $run_id $repo_flag"
                        ;;
                    *)
                        tmpfile="$(
                            mktemp gh-fzf-run-${run_id}_XXX --tmpdir --suffix .log
                        )"
                        gh run view --log $run_id $repo_flag >"$tmpfile"
                        xdg-open "$tmpfile"
                        ;;
                esac

                if [ -n "$urgency" ]; then
                    if has rofi; then
                        rerun_response="$(
                            printf "%s\n%s" "yes" "no" | rofi -dmenu -l 2 -i -p \
                                "Rerun${workflow:+ \"$workflow\"}${branch:+ on \"$branch\" branch}?"
                        )"
                    elif has dmenu; then
                        rerun_response="$(
                            printf "%s\n%s" "yes" "no" | dmenu -i -p \
                                "Rerun${workflow:+ \"$workflow\"}${branch:+ on \"$branch\" branch}?"
                        )"
                    fi

                    if [ "$rerun_response" = "yes" ]; then
                        gh run rerun --failed $run_id $repo_flag
                        gh fzf util notify-run-completed $run_id $repo_flag &
                    fi
                fi
                ;;
        esac
    elif has notify-send; then
        notify-send "$title" "$body${url:+: \n$url}" ${urgency:+-u "$urgency"} \
            ${GH_FZF_NOTIFY_ICON:+-i "$GH_FZF_NOTIFY_ICON"} -a "gh-fzf"
    elif has osascript; then
        osascript -e "display notification \"$body${url:+: \n$url}\" with title \"$title\""
    else
        error "notification support not found." \
            "Supported: dunstify, notify-send, osascript"
    fi
}

# parse and call util subcommand {{{2
util_cmd() {
    util="$1"
    [ -n "$util" ] && shift || error "missing util name"

    case $util in
        copy-url) copy_url "$@" ;;
        notify-run-completed) notify_run_completed "$@" ;;
        branch-prompt) branch_prompt "$@" ;;
        develop-issue) develop_issue "$@" ;;
        select-labels) select_labels "$@" ;;
        *) error "invalid util: \"$util\"" ;;
    esac
}
#2}}}

# ----------------------------------------------------------------------1}}}
# PARSE ARGUMENTS                                                       {{{1

# parse args to find a repo flag {{{2
find_repo_flag() {
    args=("$@")
    for i in $(seq 0 ${#args[@]}); do
        val=${args[$i]}
        case $val in
            -R | --repo)
                export GH_REPO="${args[$((i + 1))]}"
                repo_flag="--repo=${GH_REPO}"
                ;;
            -R=* | --repo=*)
                export GH_REPO="${val#*=}"
                repo_flag="--repo=${GH_REPO}"
                ;;
        esac
    done
}

# entry function {{{2
main() {
    command="$1"
    [ -n "$command" ] && shift || default_cmd

    find_repo_flag "$@"

    case $command in
        h | -h | help | --help) help_cmd "$@" ;;
        i | -i | issue | issues | --issue | --issues) issue_cmd "$@" ;;
        p | -p | pr | prs | --pr | --prs) pr_cmd "$@" ;;
        r | -r | run | runs | --run | --runs) run_cmd "$@" ;;
        repo | repos | --repo | --repos) repo_cmd "$@" ;;
        release | releases | --release | --releases) release_cmd "$@" ;;
        gist | gists | --gist | --gists) gist_cmd "$@" ;;
        workflow | workflows | --workflow | --workflows) workflow_cmd "$@" ;;
        label | labels | --label | --labels) label_cmd "$@" ;;
        milestone | milestones | --milestone | --milestones) milestone_cmd "$@" ;;
        util | utils | --util | --utils) util_cmd "$@" ;;
        changelog) gh fzf release --repo benelan/gh-fzf ;;
        v | V | -v | -V | version | --version) printf "%s\n" "$GH_FZF_VERSION" ;;
        *) error "invalid command: \"$command\"" ;;
    esac
} #2}}}

main "$@"
