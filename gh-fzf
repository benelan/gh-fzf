#!/usr/bin/env bash
# shellcheck disable=2016
set -e

# MIT License
#
# Copyright (c) Ben Elan
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

GH_FZF_VERSION="0.7.0" # x-release-please-version

# Usage info and logs                                                   {{{
# --------------------------------------------------------------------- {|}

has() { command -v "$1" >/dev/null 2>&1; }

error() {
    if [ -n "$1" ]; then
        printf "Error: %s\n" "$*"
    fi
    printf "\n%s\n" \
        "Try -h for usage information" >&2
    exit 1
}

help_cmd() {
    printf "
An fzf wrapper around the GitHub CLI.

Homepage: https://github.com/benelan/gh-fzf

Usage:
  gh fzf <command> [flags]

Core Commands:
  issue       Search for and interact with GitHub issues.
  pr          Search for and interact with GitHub pull requests.
  run         Search for and interact with GitHub Action runs.
  repo        Search for and interact with GitHub repos.
  release     Search for and interact with GitHub releases.
  gist        Search for and interact with GitHub gists.

See \`gh <command> list --help\` for the flag options.

Other Commands:
  help        Print this help message.
  version     Print the version of gh-fzf.

Check out the project homepage for more information, such as keybindings,
configuration, and examples.
" >&2
    exit 0
}

# --------------------------------------------------------------------- }}}
# Configuration                                                         {{{
# --------------------------------------------------------------------- {|}

GH_FZF_DEFAULT_LIMIT="${GH_FZF_DEFAULT_LIMIT:-69}"

if [ -z "$GH_FZF_COPY_CMD" ]; then
    if has /mnt/c/Windows/System32/clip.exe; then
        GH_FZF_COPY_CMD="/mnt/c/Windows/System32/clip.exe" # Windows (WSL)
    elif has xsel; then
        GH_FZF_COPY_CMD="xsel -bi" # Linux (X11)
    elif has xclip; then
        GH_FZF_COPY_CMD="xclip -selection clipboard" # Linux (X11)
    elif has wl-copy; then
        GH_FZF_COPY_CMD="wl-copy" # Linux (Wayland)
    elif has pbcopy; then
        GH_FZF_COPY_CMD="pbcopy" # OSX
    fi
fi

if [ -n "$GH_FZF_HIDE_HINTS" ]; then
    on_start="toggle-header"
else
    on_start=""
fi

if [ -n "$GH_FZF_TRUNCATE_FIELDS" ]; then
    gh_columns='100%'
else
    gh_columns='9999999'
fi

# The following fzf options are shared by all commands. They are prepended to
# the FZF_DEFAULT_OPTS environment variable so they can be overridden by users.
FZF_DEFAULT_OPTS='
--no-hscroll --no-exit-0 --header-lines=1
--preview-window="right:50%,wrap"
--preview-label="(alt+P: toggle preview) (alt+H: toggle hints)"
--bind="alt-P:toggle-preview"
--bind="alt-H:toggle-header"
--bind="ctrl-r:reload(eval \"$FZF_DEFAULT_COMMAND\")"
--bind="alt-1:reload(eval \"$FZF_DEFAULT_COMMAND -L100\")"
--bind="alt-2:reload(eval \"$FZF_DEFAULT_COMMAND -L200\")"
--bind="alt-3:reload(eval \"$FZF_DEFAULT_COMMAND -L300\")"
--bind="alt-4:reload(eval \"$FZF_DEFAULT_COMMAND -L400\")"
--bind="alt-5:reload(eval \"$FZF_DEFAULT_COMMAND -L500\")"
--bind="alt-6:reload(eval \"$FZF_DEFAULT_COMMAND -L600\")"
--bind="alt-6:reload(eval \"$FZF_DEFAULT_COMMAND -L600\")"
--bind="alt-7:reload(eval \"$FZF_DEFAULT_COMMAND -L700\")"
--bind="alt-8:reload(eval \"$FZF_DEFAULT_COMMAND -L800\")"
--bind="alt-9:reload(eval \"$FZF_DEFAULT_COMMAND -L900\")"
'" $FZF_DEFAULT_OPTS --no-select-1 --ansi --no-multi"
# Overriding the three options above breaks gh-fzf, so append them instead.

# --------------------------------------------------------------------- }}}
# Command > default                                                     {{{
# --------------------------------------------------------------------- {|}

default_cmd() {
    FZF_DEFAULT_COMMAND="printf 'COMMAND\n%s\n%s\n%s\n%s\n%s\n%s\n' 'issue' 'pr' 'run' 'repo' 'release' 'gist'" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh help {}' \
        --preview-window='right:75%,wrap' \
        --bind="enter:execute(gh fzf {})"
}

# --------------------------------------------------------------------- }}}
# Command > issue                                                       {{{
# --------------------------------------------------------------------- {|}

issue_cmd() {
    issue_template='\
        --json "number,title,author,assignees,state,milestone,labels,updatedAt" \
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("ISSUE" | autocolor $headerColor)
                ("LAST UPDATE" | autocolor $headerColor)
                ("TITLE" | autocolor $headerColor)
                ("AUTHOR" | autocolor $headerColor)
                ("MILESTONE" | autocolor $headerColor)
                ("LABELS" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $milestoneTitle := "" -}}
                {{- if ne .milestone nil -}}
                    {{- $milestoneTitle = .milestone.title -}}
                {{- end -}}

                {{- $stateColor := "green" -}}
                {{- if eq .state "CLOSED" -}}
                    {{- $stateColor = "red" -}}
                {{- end -}}

                {{- tablerow
                    (printf "#%v" .number | autocolor $stateColor)
                    ((timeago .updatedAt) | autocolor "white+d")
                    (truncate 100 (.title | autocolor "white+h"))
                    (.author.login | autocolor "white+d")
                    ($milestoneTitle | autocolor "white+h")
                    (pluck "name" .labels | join ", " | autocolor "white+d")
                -}}
            {{- end -}}
    '\'''

    issue_header='Actions > (enter: edit) (alt-o: checkout) (alt-c: comment) (alt-X: close) (alt-O: reopen)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-a: assignee) (alt-A: author) (alt-m: mention) (alt-s: state=all)

'

    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh issue list $issue_template -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh issue view {1} --comments '"$repo_flag" \
        --header="$issue_header" \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh issue view --web {1} $repo_flag)" \
        --bind="ctrl-y:execute-silent(gh issue view {1} --json 'url' -q '.url' $repo_flag | $GH_FZF_COPY_CMD)" \
        --bind="enter:execute(gh issue edit {1} $repo_flag)" \
        --bind="alt-o:execute(gh issue develop --checkout {1} $repo_flag)+abort" \
        --bind="alt-c:execute(gh issue comment {1} $repo_flag)" \
        --bind="alt-O:execute(gh issue reopen {1} $repo_flag)" \
        --bind="alt-X:execute(gh issue close {1} $repo_flag)" \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --assignee @me")' \
        --bind='alt-A:reload(eval "$FZF_DEFAULT_COMMAND --author @me")' \
        --bind='alt-m:reload(eval "$FZF_DEFAULT_COMMAND --mention @me")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --state all")'
}

# --------------------------------------------------------------------- }}}
# Command > pr                                                          {{{
# --------------------------------------------------------------------- {|}

pr_cmd() {
    pr_template='\
        --json "number,title,state,headRefName,milestone,updatedAt,labels" \
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("PR" | autocolor $headerColor)
                ("LAST UPDATE" | autocolor $headerColor)
                ("TITLE" | autocolor $headerColor)
                ("BRANCH" | autocolor $headerColor)
                ("LABELS" | autocolor $headerColor)
                ("MILESTONE" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $milestoneTitle := "" -}}
                {{- if ne .milestone nil -}}
                    {{- $milestoneTitle = .milestone.title -}}
                {{- end -}}

                {{- $stateColor := "green" -}}
                {{- if eq .state "CLOSED" -}}
                    {{- $stateColor = "red" -}}
                {{- else if eq .state "MERGED" -}}
                    {{- $stateColor = "magenta" -}}
                {{- end -}}

                {{- tablerow
                    (printf "#%v" .number | autocolor $stateColor)
                    ((timeago .updatedAt) | autocolor "white+d")
                    (truncate 100 (.title | autocolor "white+h"))
                    (truncate 60 (.headRefName | autocolor "white+d"))
                    (pluck "name" .labels | join ", " | autocolor "white+h")
                    ($milestoneTitle | autocolor "white+d")
                -}}
            {{- end -}}
    '\'''

    pr_header='Actions > (enter: edit) (alt-o: checkout) (alt-d: diff) (alt-c: comment) (alt-r: review)
        > (alt-C: checks) (alt-M: merge) (alt-X: close) (alt-O: reopen) (alt-R: ready)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-a: assignee) (alt-A: author) (alt-b: branch) (alt-s: state=all)

'

    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh pr list $pr_template -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh pr view {1} --comments '"$repo_flag" \
        --header="$pr_header" \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh pr view --web {1} $repo_flag)" \
        --bind="ctrl-y:execute-silent(gh pr view {1} --json 'url' -q '.url' $repo_flag | $GH_FZF_COPY_CMD)" \
        --bind="enter:execute(gh pr edit {1} $repo_flag)" \
        --bind="alt-c:execute(gh pr comment {1} $repo_flag)" \
        --bind="alt-d:execute(gh pr diff {1} $repo_flag)" \
        --bind="alt-o:execute(gh pr checkout {1} $repo_flag)" \
        --bind="alt-r:execute(gh pr review {1} $repo_flag)" \
        --bind='alt-C:execute<gh fzf run -b $(
            gh pr view {1} --json headRefName --jq .headRefName '"$repo_flag"'
        ) '"$repo_flag"'>' \
        --bind="alt-R:execute(gh pr ready {1} $repo_flag)" \
        --bind="alt-M:execute(gh pr merge {1} $repo_flag)" \
        --bind="alt-O:execute(gh pr reopen {1} $repo_flag)" \
        --bind="alt-X:execute(gh pr close {1} $repo_flag)" \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --assignee @me")' \
        --bind='alt-A:reload(eval "$FZF_DEFAULT_COMMAND --author @me")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --state all")' \
        --bind='alt-b:reload(eval "$FZF_DEFAULT_COMMAND --head \
            $(git symbolic-ref --short HEAD)")'
}

# --------------------------------------------------------------------- }}}
# Command > run                                                         {{{
# --------------------------------------------------------------------- {|}

run_cmd() {
    run_template='\
        --json "updatedAt,event,displayTitle,headBranch,databaseId,conclusion,status,name" \
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("STATUS" | autocolor $headerColor)
                ("LAST UPDATE" | autocolor $headerColor)
                ("WORKFLOW" | autocolor $headerColor)
                ("BRANCH" | autocolor $headerColor)
                ("TITLE" | autocolor $headerColor)
                ("EVENT" | autocolor $headerColor)
                ("ID" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $statusColor := "yellow" -}}
                {{- $statusText := .status -}}
                {{- if ne (len .conclusion) 0 -}}
                    {{- $statusText = .conclusion -}}
                    {{- if eq .conclusion "failure" "startup_failure" -}}
                        {{- $statusColor = "red" -}}
                    {{- else if eq .conclusion "cancelled" "timed_out" -}}
                        {{- $statusColor = "red+d" -}}
                    {{- else if eq .conclusion "action_required" -}}
                        {{- $statusColor = "magenta+h" -}}
                    {{- else if eq .conclusion "stale" -}}
                        {{- $statusColor = "yellow+d" -}}
                    {{- else if eq .conclusion "success" -}}
                        {{- $statusColor = "green" -}}
                    {{- else if eq .conclusion "skipped" -}}
                        {{- $statusColor = "white+d" -}}
                    {{- end -}}
                {{- end -}}

                {{- tablerow
                    ($statusText | autocolor $statusColor)
                    ((timeago .updatedAt) | autocolor "white+d")
                    (.name | autocolor "white+h")
                    (truncate 60 (.headBranch | autocolor "white+d"))
                    (truncate 100 (.displayTitle | autocolor "white+h"))
                    (.event | autocolor "white+d")
                    (.databaseId | autocolor "white+h")
                -}}
            {{- end -}}
    '\'''

    run_header='Actions > (enter: watch) (alt-l: logs) (alt-r: rerun) (alt-x: cancel) (alt-p: pr) (alt-d: download)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-f: failed runs) (alt-b: current branch) (alt-u: current user)

'

    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh run list $run_template -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh run view {-1} '"$repo_flag" \
        --header="$run_header" \
        --bind="start:$on_start" \
        --bind="ctrl-o:execute-silent(gh run view --web {-1} $repo_flag)" \
        --bind="ctrl-y:execute-silent(gh run view {-1} --json 'url' -q '.url' $repo_flag | $GH_FZF_COPY_CMD)" \
        --bind="enter:execute(gh run watch {-1} $repo_flag)" \
        --bind="alt-l:execute(gh run view --log {-1} $repo_flag)" \
        --bind="alt-r:execute(gh run rerun {-1} $repo_flag)" \
        --bind="alt-d:execute(gh run download {-1} $repo_flag)" \
        --bind="alt-x:execute(gh run cancel {-1} $repo_flag)" \
        --bind='alt-p:execute<gh fzf pr --head $(
            gh run view {-1} --json headBranch --jq .headBranch '"$repo_flag"'
        ) '"$repo_flag"'>' \
        --bind='alt-b:reload(eval "$FZF_DEFAULT_COMMAND --branch $(
            git symbolic-ref --short HEAD
            )")' \
        --bind='alt-f:reload(eval "$FZF_DEFAULT_COMMAND --status failure")' \
        --bind='alt-u:reload(eval "$FZF_DEFAULT_COMMAND --user $(gh api user -q .login)")'
}

# --------------------------------------------------------------------- }}}
# Command > repo                                                        {{{
# --------------------------------------------------------------------- {|}

repo_cmd() {
    # repo_template='\
    #     --json "nameWithOwner,description,stargazerCount,forkCount,updatedAt,viewerPermission,visibility" \
    #     --template '\''
    #         {{- $headerColor := "blue+b" -}}
    #         {{- tablerow
    #             ("REPO" | autocolor $headerColor)
    #             ("VISIBILITY" | autocolor $headerColor)
    #             ("PERMISSIONS" | autocolor $headerColor)
    #             ("LAST UPDATE" | autocolor $headerColor)
    #             ("DESCRIPTION" | autocolor $headerColor)
    #             ("STARS" | autocolor $headerColor)
    #             ("FORKS" | autocolor $headerColor)
    #         -}}

    #         {{- range . -}}
    #             {{- tablerow
    #                 (.nameWithOwner | autocolor "white+h")
    #                 (.visibility | autocolor "white+d")
    #                 (.viewerPermission | autocolor "white+h")
    #                 ((timeago .updatedAt) | autocolor "white+d")
    #                 (truncate 100 (.description | autocolor "white+h"))
    #                 (.stargazerCount | autocolor "white+d")
    #                 (.forkCount | autocolor "white+h")
    #             -}}
    #         {{- end -}}
    # '\'''

    repo_header='Actions > (enter: edit) (alt-p: prs) (alt-i: issues) (alt-r: runs) (alt-C: clone) (alt-F: fork)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-c: private) (alt-o: public) (alt-s: source) (alt-f: forks)
'

    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh repo list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh repo view {1}' \
        --header="$repo_header" \
        --header-lines=4 \
        --bind="start:$on_start" \
        --bind='ctrl-o:execute-silent(gh repo view --web {1})' \
        --bind="ctrl-y:execute-silent(gh repo view {1} --json 'url' -q '.url' | $GH_FZF_COPY_CMD)" \
        --bind="alt-p:execute(gh fzf pr --repo {1})" \
        --bind="alt-i:execute(gh fzf issue --repo {1})" \
        --bind="alt-r:execute(gh fzf run --repo {1})" \
        --bind='enter:execute(gh repo edit {1})' \
        --bind='alt-C:execute(gh repo clone {1})' \
        --bind="alt-F:execute(gh repo fork {1})" \
        --bind='alt-c:reload(eval "$FZF_DEFAULT_COMMAND --visibility private")' \
        --bind='alt-o:reload(eval "$FZF_DEFAULT_COMMAND --visibility public")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --source")' \
        --bind='alt-f:reload(eval "$FZF_DEFAULT_COMMAND --fork")'
}

# --------------------------------------------------------------------- }}}
# Command > release                                                     {{{
# --------------------------------------------------------------------- {|}

release_cmd() {
    release_template='\
        --json "publishedAt,isDraft,isLatest,isPrerelease,name,tagName" \
        --template '\''
            {{- $headerColor := "blue+b" -}}
            {{- tablerow
                ("TAG" | autocolor $headerColor)
                ("PUBLISHED" | autocolor $headerColor)
                ("TITLE" | autocolor $headerColor)
                ("TYPE" | autocolor $headerColor)
            -}}

            {{- range . -}}
                {{- $type := "" -}}
                {{- $typeColor := "white+d" -}}
                {{- if eq .isLatest true -}}
                    {{- $type = "Latest" -}}
                    {{- $typeColor = "green" -}}
                {{- else if eq .isPrerelease true -}}
                    {{- $type = "Pre-release" -}}
                    {{- $typeColor = "yellow" -}}
                {{- else if eq .isDraft true -}}
                    {{- $type = "Draft" -}}
                {{- end -}}
                {{- tablerow
                    (.tagName | autocolor "white+h")
                    (printf "%s (%s)"
                        (timefmt "2006-01-02" .publishedAt)
                        (timeago .publishedAt)
                    | autocolor "white+d")
                    (.name | autocolor "white+h")
                    ($type | autocolor $typeColor)
                -}}
            {{- end -}}
    '\'''

    release_header='Actions > (enter: download) (alt-X: delete)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-s: stable) (alt-p: published) (alt-a: ascending)

'

    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh release $release_template list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh release view {1}' \
        --header="$release_header" \
        --bind="start:$on_start" \
        --bind='ctrl-o:execute-silent(gh release view --web {1})' \
        --bind="ctrl-y:execute-silent(gh release view {1} --json 'url' -q '.url' | $GH_FZF_COPY_CMD)" \
        --bind="alt-enter:execute(gh release download {1})" \
        --bind="alt-X:execute(gh release delete {1})" \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --exclude-pre-releases")' \
        --bind='alt-p:reload(eval "$FZF_DEFAULT_COMMAND --exclude-drafts")' \
        --bind='alt-a:reload(eval "$FZF_DEFAULT_COMMAND --order asc")'
}

# --------------------------------------------------------------------- }}}
# Command > gist                                                        {{{
# --------------------------------------------------------------------- {|}

gist_cmd() {
    gist_header='Actions > (enter: edit) (alt-c: clone) (alt-X: delete)
        > (ctrl-o: open url) (ctrl-y: copy url) (ctrl-r: reload)
Filters > (alt-p: public) (alt-s: secret)

'

    FZF_DEFAULT_COMMAND="GH_FORCE_TTY=$gh_columns gh gist list -L $GH_FZF_DEFAULT_LIMIT $*" \
        fzf \
        --preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh gist view {1}' \
        --header="$gist_header" \
        --bind="start:$on_start" \
        --bind='ctrl-o:execute-silent(gh gist view --web {1})' \
        --bind="ctrl-y:execute-silent(echo https://gist.github.com/$(gh api user -q .login)/{1} | $GH_FZF_COPY_CMD)" \
        --bind='enter:execute(gh gist edit {1})' \
        --bind='alt-c:execute(gh gist clone {1})' \
        --bind="alt-X:execute(gh gist delete {1})" \
        --bind='alt-p:reload(eval "$FZF_DEFAULT_COMMAND --public")' \
        --bind='alt-s:reload(eval "$FZF_DEFAULT_COMMAND --secret")'
}

# --------------------------------------------------------------------- }}}
# Parse arguments                                                       {{{
# --------------------------------------------------------------------- {|}

find_repo_flag() {
    for i in "$@"; do
        case $i in
            -R | --repo)
                repo_flag="--repo $2"
                shift # past argument
                shift # past value
                ;;
            -R=* | --repo=*)
                repo_flag="--repo=${i#*=}"
                shift # past argument=value
                ;;
        esac
    done
}

main() {
    command="$1"

    if [ -z "$command" ]; then
        default_cmd
    else
        shift
    fi

    find_repo_flag "$@"

    case $command in
        h | -h | help | --help) help_cmd "$@" ;;
        i | -i | issue | issues | --issue | --issues) issue_cmd "$@" ;;
        p | -p | pr | prs | --pr | --prs) pr_cmd "$@" ;;
        r | -r | run | runs | --run | --runs) run_cmd "$@" ;;
        repo | repos | --repo | --repos) repo_cmd "$@" ;;
        release | releases | --release | --releases) release_cmd "$@" ;;
        gist | gists | --gist | --gists) gist_cmd "$@" ;;
        v | V | -v | -V | version | --version) printf "%s\n" "$GH_FZF_VERSION" ;;
        *) error "invalid command: \"$command\"" ;;
    esac
}

# --------------------------------------------------------------------- }}}

main "$@"
